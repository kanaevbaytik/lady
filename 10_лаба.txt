Для начала создаем новую базу данных "productsdb" 
и две таблицы "Products", "History".

CREATE DATABASE productsdb;
GO
USE productsdb;
CREATE TABLE Products
(
    Id INT IDENTITY PRIMARY KEY,
    ProductName NVARCHAR(30) NOT NULL,
    Manufacturer NVARCHAR(20) NOT NULL,
    ProductCount INT DEFAULT 0,
    Price MONEY NOT NULL
);
CREATE TABLE History 
(
    Id INT IDENTITY PRIMARY KEY,
    ProductId INT NOT NULL,
    Operation NVARCHAR(200) NOT NULL,
    CreateAt DATETIME NOT NULL DEFAULT GETDATE(),
);

Табица "Products" для хранения товаров.
Таблица "History" будет хранить в себе историю операции над товарами.

Создадим триггер, который будет срабатывать при добавлении данных в таблицу
"Products". Добавленные данные можно получить и виртуальной таблицы INSTERTED.

USE productsdb
GO
CREATE TRIGGER Products_INSERT
ON Products
AFTER INSERT
AS
INSERT INTO History (ProductId, Operation)
SELECT Id, 'Добавлен товар ' + ProductName + '   фирма ' + Manufacturer
FROM INSERTED

Для демонстрации работы триггера добавим данные в таблицу "Products"

USE productsdb;
INSERT INTO Products (ProductName, Manufacturer, ProductCount, Price)
VALUES('iPhone X', 'Apple', 2, 79900)

SELECT * FROM History


Создадим хранимую процедуру "update_price" для того, чтобы в дальнейшем использвотать 
в триггере BEFORE.

AS
BEGIN
  UPDATE Products
  SET price = @new_price
  WHERE id = @id
END

Далее создадим триггер "instead_of_update_price", который не позволит напрямую изменить поле цена.
Теперь цену можно изменть только с помощью хранимой процедуры "update_price".

CREATE TRIGGER instead_of_update_price
ON employees
INSTEAD OF UPDATE OF price
AS
BEGIN
  RAISERROR('Вы не можете обновить столбец цены напрямую. Вместо этого используйте хранимую процедуру update_price.', 16, 1)
END

Так как MSSQL не поддерживает оператор BEFORE, то мы используем другой оператор INSTEAD.